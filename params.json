{"name":"DataTransformer","tagline":"Transforms provided input data of a certain format to a different format specified by the provided transform.","body":"Transformer\r\n===========\r\n![alt tag](https://raw.github.com/davydany/DataTransformer/master/transformer.jpg)\r\n\r\n\r\nUtility that transforms provided tabulated data to any output, based on provided transform.\r\n\r\nRequires\r\n--------\r\n\r\n1. lxml >= 3.2.1\r\n2. Jinja2 >= 2.7.1\r\n3. MarkupSafe >= 0.18\r\n\r\nInstallation\r\n------------\r\n\r\nCheckout and run setup.py\r\n\r\n    python setup.py install\r\n\r\nFeatures\r\n--------\r\n\r\nDataTransformer transforms your data using the transform file you provide it. It supports 3\r\nformats. They are:\r\n\r\n- Simple Transformer\r\n- Jinja2 Template Language\r\n- XSLT Transform\r\n\r\n**Which one should you use?**\r\n\r\nWell that depends on what you want to do. If you're comfortable with representing your input \r\nwith XML and transforming with XSLT, you should use XSLT transforms. Most people are not, so\r\nthat's why you can use the Simple Transform and Jinja2 Template Language. Jinja2 is just as\r\npowerful (if not more powerful) than XSLT. However, with great power comes great need to \r\nunderstand what you're doing. You will need to read Jinja2's documentation before \r\nfully utilizing transformer. The simplest solution, therefore, is to use the Simple Transformer\r\nbut it is not very smart. You cannot use if/then conditions, add/subtract numbers or check if a \r\nnumber is odd or even. Therefore, you are limited with just string replace. If this is what you\r\nwant, feel free to use the Simple transformer.\r\n\r\nHowever, I urge you to look at the Usage and the examples below before making your decision.\r\n\r\nUsage\r\n-----\r\n\r\nIf you need help at any moment, enter the following. This documentation assumes that you're\r\nusing the examples in the examples file.\r\n\r\n    transformer --help\r\n\r\nYou need 2 files:\r\n\r\n- Input File\r\n- Transform File\r\n\r\nDepending on what transform you use, you will need to provide different input\r\nfiles and transforms you use. Like most programs, this application is stupid,\r\nand it requires you to be explicit with what you give it. Please pay attention\r\nto details.\r\n\r\nYou are required to pass 3 flags to transformer to work:\r\n\r\n- **-i / --input** - Path to Input File\r\n- **-t / --transformer** - Path to Transform File\r\n- **-x / --transformer_type** - Transformer Type\r\n\r\nThe following are optional flags:\r\n\r\n- **-s / --separator** - Row Separator for standard output. Not applicable for xslt.\r\n- **--prefix** - String to place at begining of print out\r\n- **--suffix** - String to place at end of stdout.\r\n- **--row** - Enter the row number you want to process. Row number must be greater than 1, where 1 represents header.\r\n- **--output-filepath** - Enter absolute path to where you want to save your file. **NOTE:** Row MUST be provided for this. Only used for Jinja and Simple transforms.\r\n\r\nYou can use these to understand what's going on below.\r\n\r\n### Simple Transform\r\n\r\nTo use the Simple Transformer, do the following.\r\n\r\n    transformer -i examples/people.csv -t examples/people_transformer.json -x simple\r\n\r\nThis will return a JSON file in the command line with the data you provided in people.csv,\r\nwith the transform found in people_transform.json.\r\n\r\nTo output in XML, write your own or use the XML transformer file found in examples:\r\n\r\n    transformer -i examples/people.csv -t examples/people_transformer.xml -x simple\r\n\r\n### Jinja2 Transformer\r\n\r\nTo use the Jinja2 Transformer, do the following.\r\n\r\n    transformer -i examples/people.csv -t examples/people_transformer.jinja -x jinja\r\n\r\nThis will return XML file that was formatted using the Jinja templating language.\r\n\r\n### XSLT Transform\r\n\r\nTo use the XSLT Transformer, do the following\r\n\r\n    transformer -i examples/people.xml -t examples/people_transformer.xslt -x xslt\r\n\r\nSimple Transformer\r\n------------------\r\n\r\nThe Simple Transform doesn't have any intelligence and is not smart, so do not\r\nexpect it to do loops and like Jinja or Django Templating Language does. I\r\nhope to add support for Jinja in the near future.\r\n\r\n### Input File\r\n\r\n    id,name,age,height,weight\r\n    1,Alice,20,62,120.6\r\n    2,Freddie,21,74,190.6\r\n    3,Bob,17,68,120.0\r\n\r\n### Transform File and Output (XML)\r\n\r\nIf you want your transformation to yield a XML, create the following XML Transform File (people_transform.xml):\r\n\r\n    <person>\r\n        <id>$id</id>\r\n        <name>$name</name>\r\n        <age>$age</age>\r\n        <height>$height</height>\r\n        <weight>$weight</weight>\r\n    </person>\r\n\r\nAnd run:\r\n\r\n    transformer -i examples/people.csv -t examples/people_transformer.xml --prefix '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' -x simple\r\n    \r\nTo get: \r\n\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <people>\r\n        <person>\r\n            <id>1</id>\r\n            <name>Alice</name>\r\n            <age>20</age>\r\n            <height>62</height>\r\n            <weight>120.6</weight>\r\n        </person>\r\n        <person>\r\n            <id>2</id>\r\n            <name>Freddie</name>\r\n            <age>21</age>\r\n            <height>74</height>\r\n            <weight>190.6</weight>\r\n        </person>\r\n        <person>\r\n            <id>3</id>\r\n            <name>Bob</name>\r\n            <age>17</age>\r\n            <height>68</height>\r\n            <weight>120.0</weight>\r\n        </person>\r\n    </people>\r\n    \r\n**NOTE:** You'll need to format yourself\r\n\r\n### Transform File and Output (JSON)\r\nIf you want your transformation to yield a JSON, create the following JSON Transform File (people_transform.json):\r\n\r\n    {\r\n        id : \"$id\",\r\n        name : \"$name\",\r\n        age : \"$age\",\r\n        height : \"$height\",\r\n        weight : \"$weight\"\r\n    }\r\n\r\nAnd run:\r\n\r\n    transformer -i examples/people.csv -t examples/people_transformer.json --prefix [ --suffix ] --separator , -x simple\r\n    \r\nTo get: \r\n\r\n    [\r\n        {\r\n            id : \"1\",\r\n            name : \"Alice\",\r\n            age : \"20\",\r\n            height : \"62\",\r\n            weight : \"120.6\"\r\n        },\r\n        {\r\n            id : \"2\",\r\n            name : \"Freddie\",\r\n            age : \"21\",\r\n            height : \"74\",\r\n            weight : \"190.6\"\r\n        },\r\n        {\r\n            id : \"3\",\r\n            name : \"Bob\",\r\n            age : \"17\",\r\n            height : \"68\",\r\n            weight : \"120.0\"\r\n        },\r\n    ]\r\n    \r\n**NOTE:** You'll need to format yourself.\r\n\r\n### Transform File and Output (SQL)\r\nIf you want your transformation to yield a JSON, create the following JSON Transform File (people_transform.json):\r\n\r\n    INSERT INTO table (id, name, age, height, weight) VALUES ($id, \"$name\", \"$age\", \"$height\", \"$weight\")\r\n\r\n\r\n\r\nAnd run:\r\n\r\n    transformer -i examples/people.csv -t examples/people_transformer.sql --separator \\; -x simple\r\n    \r\nTo get: \r\n\r\n    INSERT INTO table (id, name, age, height, weight) VALUES (1, \"Alice\", \"20\", \"62\", \"120.6\");\r\n    INSERT INTO table (id, name, age, height, weight) VALUES (2, \"Freddie\", \"21\", \"74\", \"190.6\");\r\n    INSERT INTO table (id, name, age, height, weight) VALUES (3, \"Bob\", \"17\", \"68\", \"120.0\");\r\n    \r\n**NOTE:** You'll need to format yourself.\r\n\r\nJinja2 Transformer\r\n------------------\r\n\r\nSuppose you have a CSV file (people.csv)\r\n\r\n    id,name,age,height,weight\r\n    1,Alice,20,62,120.6\r\n    2,Freddie,21,74,190.6\r\n    3,Bob,17,68,120.0\r\n\r\nAnd we have the following Jinja2 formatted file:\r\n\r\n\r\n    {% if id|float % 2 == 0 %}\r\n    <people>\r\n        <id>{{ id|float + 3 }}</id>\r\n        <name>{{ name|upper }}</id>\r\n        <age>{{ age| float }}</age>\r\n        <height>{{ height|float / 12 }}</height>\r\n        <weight>{{ weight }}</weight>\r\n    </people>\r\n    {% endif %}\r\n\r\n\r\nWe will run the following command:\r\n\r\n    transformer -i examples/people.csv -t examples/people_transformer.jinja -x jinja\r\n\r\nWhich will yield:\r\n\r\n\r\n    <people>\r\n        <id>5.0</id>\r\n        <name>FREDDIE</id>\r\n        <age>21.0</age>\r\n        <height>6.16666666667</height>\r\n        <weight>190.6</weight>\r\n    </people>\r\n\r\n\r\nXSLT Transformer\r\n----------------\r\n\r\nSuppose you have an input XML file (tools.xml):\r\n\r\n    <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n    <tool>\r\n      <field id=\"prodName\">\r\n        <value>HAMMER HG2606</value>\r\n      </field>\r\n      <field id=\"prodNo\">\r\n        <value>32456240</value>\r\n      </field>\r\n      <field id=\"price\">\r\n        <value>$30.00</value>\r\n      </field>\r\n    </tool>\r\n\r\nAnd the following is your XSLT file (tools.xslt):\r\n\r\n    <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n    <xsl:stylesheet version=\"1.0\"\r\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n    \r\n    <xsl:template match=\"/\">\r\n      <html>\r\n      <body>\r\n      <form method=\"post\" action=\"edittool.asp\">\r\n      <h2>Tool Information (edit):</h2>\r\n      <table border=\"0\">\r\n        <xsl:for-each select=\"tool/field\">\r\n        <tr>\r\n          <td><xsl:value-of select=\"@id\"/></td>\r\n          <td>\r\n          <input type=\"text\">\r\n          <xsl:attribute name=\"id\">\r\n            <xsl:value-of select=\"@id\" />\r\n          </xsl:attribute>\r\n          <xsl:attribute name=\"name\">\r\n            <xsl:value-of select=\"@id\" />\r\n          </xsl:attribute>\r\n          <xsl:attribute name=\"value\">\r\n            <xsl:value-of select=\"value\" />\r\n          </xsl:attribute>\r\n          </input>\r\n          </td>\r\n        </tr>\r\n        </xsl:for-each>\r\n      </table>\r\n      <br />\r\n      <input type=\"submit\" id=\"btn_sub\" name=\"btn_sub\" value=\"Submit\" />\r\n      <input type=\"reset\" id=\"btn_res\" name=\"btn_res\" value=\"Reset\" />\r\n      </form>\r\n      </body>\r\n      </html>\r\n    </xsl:template>\r\n    \r\n    </xsl:stylesheet>\r\n\r\nYou want to run the transform with the following command:\r\n\r\n    transformer -i examples/tools.xml -t examples/tools.xslt -x xslt\r\n    \r\nAnd you'll get the following output:\r\n\r\n    <html>\r\n      <body>\r\n        <form method=\"post\" action=\"edittool.asp\">\r\n          <h2>Tool Information (edit):</h2>\r\n          <table border=\"0\">\r\n            <tr>\r\n              <td>prodName</td>\r\n              <td>\r\n                <input type=\"text\" id=\"prodName\" name=\"prodName\" value=\"HAMMER HG2606\"/>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>prodNo</td>\r\n              <td>\r\n                <input type=\"text\" id=\"prodNo\" name=\"prodNo\" value=\"32456240\"/>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>price</td>\r\n              <td>\r\n                <input type=\"text\" id=\"price\" name=\"price\" value=\"$30.00\"/>\r\n              </td>\r\n            </tr>\r\n          </table>\r\n          <br/>\r\n          <input type=\"submit\" id=\"btn_sub\" name=\"btn_sub\" value=\"Submit\"/>\r\n          <input type=\"reset\" id=\"btn_res\" name=\"btn_res\" value=\"Reset\"/>\r\n        </form>\r\n      </body>\r\n    </html>\r\n\r\n\r\n","google":"UA-15613139-3","note":"Don't delete this file! It's used internally to help with page regeneration."}